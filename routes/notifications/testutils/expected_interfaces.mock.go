// Code generated by MockGen. DO NOT EDIT.
// Source: routes/notifications/expected_interfaces.go

// Package testutils is a generated GoMock package.
package testutils

import (
	reflect "reflect"

	types "github.com/desmos-labs/caerus/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetApp mocks base method.
func (m *MockDatabase) GetApp(appID string) (*types.Application, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", appID)
	ret0, _ := ret[0].(*types.Application)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApp indicates an expected call of GetApp.
func (mr *MockDatabaseMockRecorder) GetApp(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockDatabase)(nil).GetApp), appID)
}

// GetAppNotificationsCount mocks base method.
func (m *MockDatabase) GetAppNotificationsCount(appID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppNotificationsCount", appID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppNotificationsCount indicates an expected call of GetAppNotificationsCount.
func (mr *MockDatabaseMockRecorder) GetAppNotificationsCount(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppNotificationsCount", reflect.TypeOf((*MockDatabase)(nil).GetAppNotificationsCount), appID)
}

// GetAppNotificationsRateLimit mocks base method.
func (m *MockDatabase) GetAppNotificationsRateLimit(appID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppNotificationsRateLimit", appID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppNotificationsRateLimit indicates an expected call of GetAppNotificationsRateLimit.
func (mr *MockDatabaseMockRecorder) GetAppNotificationsRateLimit(appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppNotificationsRateLimit", reflect.TypeOf((*MockDatabase)(nil).GetAppNotificationsRateLimit), appID)
}

// MockFirebase is a mock of Firebase interface.
type MockFirebase struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseMockRecorder
}

// MockFirebaseMockRecorder is the mock recorder for MockFirebase.
type MockFirebaseMockRecorder struct {
	mock *MockFirebase
}

// NewMockFirebase creates a new mock instance.
func NewMockFirebase(ctrl *gomock.Controller) *MockFirebase {
	mock := &MockFirebase{ctrl: ctrl}
	mock.recorder = &MockFirebaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebase) EXPECT() *MockFirebaseMockRecorder {
	return m.recorder
}

// SendNotificationToUsers mocks base method.
func (m *MockFirebase) SendNotificationToUsers(application *types.Application, usersAddresses []string, notification *types.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationToUsers", application, usersAddresses, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationToUsers indicates an expected call of SendNotificationToUsers.
func (mr *MockFirebaseMockRecorder) SendNotificationToUsers(application, usersAddresses, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationToUsers", reflect.TypeOf((*MockFirebase)(nil).SendNotificationToUsers), application, usersAddresses, notification)
}
