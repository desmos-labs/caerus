// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: caerus/notifications/v1/service.proto

package notifications

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SendNotificationRequest struct {
	// UserAddresses represent the addresses of the users to which send the
	// notification
	UserAddresses []string `protobuf:"bytes,1,rep,name=user_addresses,json=userAddresses,proto3" json:"user_addresses,omitempty"`
	// Notification contains the JSON-encoded data of the notification to be sent.
	Notification []byte `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (m *SendNotificationRequest) Reset()         { *m = SendNotificationRequest{} }
func (m *SendNotificationRequest) String() string { return proto.CompactTextString(m) }
func (*SendNotificationRequest) ProtoMessage()    {}
func (*SendNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16f1601daaa10480, []int{0}
}
func (m *SendNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendNotificationRequest.Merge(m, src)
}
func (m *SendNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendNotificationRequest proto.InternalMessageInfo

func (m *SendNotificationRequest) GetUserAddresses() []string {
	if m != nil {
		return m.UserAddresses
	}
	return nil
}

func (m *SendNotificationRequest) GetNotification() []byte {
	if m != nil {
		return m.Notification
	}
	return nil
}

func init() {
	proto.RegisterType((*SendNotificationRequest)(nil), "caerus.notifications.v1.SendNotificationRequest")
}

func init() {
	proto.RegisterFile("caerus/notifications/v1/service.proto", fileDescriptor_16f1601daaa10480)
}

var fileDescriptor_16f1601daaa10480 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x4e, 0x4c, 0x2d,
	0x2a, 0x2d, 0xd6, 0xcf, 0xcb, 0x2f, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b,
	0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x87, 0x28, 0xd3, 0x43, 0x51, 0xa6, 0x57, 0x66, 0x28, 0x25, 0x9d, 0x9e, 0x9f,
	0x9f, 0x9e, 0x93, 0xaa, 0x0f, 0x56, 0x96, 0x54, 0x9a, 0xa6, 0x9f, 0x9a, 0x5b, 0x50, 0x52, 0x09,
	0xd1, 0xa5, 0x94, 0xc2, 0x25, 0x1e, 0x9c, 0x9a, 0x97, 0xe2, 0x87, 0xa4, 0x29, 0x28, 0xb5, 0xb0,
	0x34, 0xb5, 0xb8, 0x44, 0x48, 0x95, 0x8b, 0xaf, 0xb4, 0x38, 0xb5, 0x28, 0x3e, 0x31, 0x25, 0xa5,
	0x28, 0xb5, 0xb8, 0x38, 0xb5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0x33, 0x88, 0x17, 0x24, 0xea,
	0x08, 0x13, 0x14, 0x52, 0xe2, 0xe2, 0x41, 0xb6, 0x52, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08,
	0x45, 0xcc, 0xa8, 0x84, 0x4b, 0x04, 0xd9, 0x86, 0xe2, 0x60, 0x88, 0xcb, 0x85, 0x62, 0xb8, 0x04,
	0xd0, 0x6d, 0x17, 0x32, 0xd0, 0xc3, 0xe1, 0x11, 0x3d, 0x1c, 0x0e, 0x95, 0x12, 0xd3, 0x83, 0xf8,
	0x50, 0x0f, 0xe6, 0x43, 0x3d, 0x57, 0x90, 0x0f, 0x9d, 0x7c, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8,
	0xf1, 0x58, 0x8e, 0x21, 0xca, 0x28, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0x3f, 0x25, 0xb5, 0x38, 0x37, 0xbf, 0x58, 0x37, 0x27, 0x31, 0xa9, 0x58, 0x1f, 0x1a, 0xd2, 0x45,
	0xf9, 0xa5, 0x25, 0xa9, 0x68, 0x01, 0x9e, 0xc4, 0x06, 0x36, 0xdd, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x62, 0x88, 0xd1, 0xfd, 0x8f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationsServiceClient struct {
	cc grpc1.ClientConn
}

func NewNotificationsServiceClient(cc grpc1.ClientConn) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/caerus.notifications.v1.NotificationsService/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
type NotificationsServiceServer interface {
	SendNotification(context.Context, *SendNotificationRequest) (*emptypb.Empty, error)
}

// UnimplementedNotificationsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (*UnimplementedNotificationsServiceServer) SendNotification(ctx context.Context, req *SendNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}

func RegisterNotificationsServiceServer(s grpc1.Server, srv NotificationsServiceServer) {
	s.RegisterService(&_NotificationsService_serviceDesc, srv)
}

func _NotificationsService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caerus.notifications.v1.NotificationsService/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "caerus.notifications.v1.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationsService_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caerus/notifications/v1/service.proto",
}

func (m *SendNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notification) > 0 {
		i -= len(m.Notification)
		copy(dAtA[i:], m.Notification)
		i = encodeVarintService(dAtA, i, uint64(len(m.Notification)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddresses) > 0 {
		for iNdEx := len(m.UserAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserAddresses[iNdEx])
			copy(dAtA[i:], m.UserAddresses[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.UserAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserAddresses) > 0 {
		for _, s := range m.UserAddresses {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Notification)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddresses = append(m.UserAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notification = append(m.Notification[:0], dAtA[iNdEx:postIndex]...)
			if m.Notification == nil {
				m.Notification = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
