// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: caerus/types/v1/requests.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignedRequest struct {
	// DesmosAddress represents the Bech23-encoded Desmos address of the user
	DesmosAddress string `protobuf:"bytes,1,opt,name=desmos_address,json=desmosAddress,proto3" json:"desmos_address,omitempty"`
	// SignedBytes represents the hex-encoded bytes that were signed by the user
	SignedBytes string `protobuf:"bytes,2,opt,name=signed_bytes,json=signedBytes,proto3" json:"signed_bytes,omitempty"`
	// PubKeyBytes represents the hex-encoded bytes of the public key associated to the
	// private key that was used to sign the data
	PubKeyBytes string `protobuf:"bytes,3,opt,name=pub_key_bytes,json=pubKeyBytes,proto3" json:"pub_key_bytes,omitempty"`
	// SignatureBytes represents the hex-encoded bytes that are resulting from the
	// signature of the data
	SignatureBytes string `protobuf:"bytes,4,opt,name=signature_bytes,json=signatureBytes,proto3" json:"signature_bytes,omitempty"`
}

func (m *SignedRequest) Reset()         { *m = SignedRequest{} }
func (m *SignedRequest) String() string { return proto.CompactTextString(m) }
func (*SignedRequest) ProtoMessage()    {}
func (*SignedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ec39626858f7893, []int{0}
}
func (m *SignedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedRequest.Merge(m, src)
}
func (m *SignedRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedRequest proto.InternalMessageInfo

func (m *SignedRequest) GetDesmosAddress() string {
	if m != nil {
		return m.DesmosAddress
	}
	return ""
}

func (m *SignedRequest) GetSignedBytes() string {
	if m != nil {
		return m.SignedBytes
	}
	return ""
}

func (m *SignedRequest) GetPubKeyBytes() string {
	if m != nil {
		return m.PubKeyBytes
	}
	return ""
}

func (m *SignedRequest) GetSignatureBytes() string {
	if m != nil {
		return m.SignatureBytes
	}
	return ""
}

func init() {
	proto.RegisterType((*SignedRequest)(nil), "caerus.types.v1.SignedRequest")
}

func init() { proto.RegisterFile("caerus/types/v1/requests.proto", fileDescriptor_5ec39626858f7893) }

var fileDescriptor_5ec39626858f7893 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x4e, 0x4c, 0x2d,
	0x2a, 0x2d, 0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x87, 0xc8, 0xeb, 0x81,
	0xe5, 0xf5, 0xca, 0x0c, 0x95, 0x96, 0x31, 0x72, 0xf1, 0x06, 0x67, 0xa6, 0xe7, 0xa5, 0xa6, 0x04,
	0x41, 0x54, 0x0a, 0xa9, 0x72, 0xf1, 0xa5, 0xa4, 0x16, 0xe7, 0xe6, 0x17, 0xc7, 0x27, 0xa6, 0xa4,
	0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xf1, 0x42, 0x44, 0x1d, 0x21,
	0x82, 0x42, 0x8a, 0x5c, 0x3c, 0xc5, 0x60, 0x7d, 0xf1, 0x49, 0x95, 0x25, 0xa9, 0xc5, 0x12, 0x4c,
	0x60, 0x45, 0xdc, 0x10, 0x31, 0x27, 0x90, 0x90, 0x90, 0x12, 0x17, 0x6f, 0x41, 0x69, 0x52, 0x7c,
	0x76, 0x6a, 0x25, 0x54, 0x0d, 0x33, 0x44, 0x4d, 0x41, 0x69, 0x92, 0x77, 0x6a, 0x25, 0x44, 0x8d,
	0x3a, 0x17, 0x3f, 0x48, 0x4b, 0x62, 0x49, 0x69, 0x51, 0x2a, 0x54, 0x15, 0x0b, 0x58, 0x15, 0x1f,
	0x5c, 0x18, 0xac, 0xd0, 0xc9, 0xf6, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2,
	0x94, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x21, 0x6e, 0xd4, 0xcd,
	0x49, 0x4c, 0x2a, 0xd6, 0x47, 0x0e, 0x8a, 0x24, 0x36, 0xb0, 0xff, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf4, 0xd4, 0x4f, 0x4c, 0x21, 0x01, 0x00, 0x00,
}

func (m *SignedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureBytes) > 0 {
		i -= len(m.SignatureBytes)
		copy(dAtA[i:], m.SignatureBytes)
		i = encodeVarintRequests(dAtA, i, uint64(len(m.SignatureBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKeyBytes) > 0 {
		i -= len(m.PubKeyBytes)
		copy(dAtA[i:], m.PubKeyBytes)
		i = encodeVarintRequests(dAtA, i, uint64(len(m.PubKeyBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SignedBytes) > 0 {
		i -= len(m.SignedBytes)
		copy(dAtA[i:], m.SignedBytes)
		i = encodeVarintRequests(dAtA, i, uint64(len(m.SignedBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DesmosAddress) > 0 {
		i -= len(m.DesmosAddress)
		copy(dAtA[i:], m.DesmosAddress)
		i = encodeVarintRequests(dAtA, i, uint64(len(m.DesmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequests(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequests(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DesmosAddress)
	if l > 0 {
		n += 1 + l + sovRequests(uint64(l))
	}
	l = len(m.SignedBytes)
	if l > 0 {
		n += 1 + l + sovRequests(uint64(l))
	}
	l = len(m.PubKeyBytes)
	if l > 0 {
		n += 1 + l + sovRequests(uint64(l))
	}
	l = len(m.SignatureBytes)
	if l > 0 {
		n += 1 + l + sovRequests(uint64(l))
	}
	return n
}

func sovRequests(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequests(x uint64) (n int) {
	return sovRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequests
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequests
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequests
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequests        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequests          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequests = fmt.Errorf("proto: unexpected end of group")
)
